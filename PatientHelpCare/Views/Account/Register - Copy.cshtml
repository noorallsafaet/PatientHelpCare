@model PatientHelpCare.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
    Layout = null;
}

<link href="~/Content/bootstrap.min.css" rel="stylesheet">
<link href="~/Fonts/font-awesome/css/font-awesome.css" rel="stylesheet">

<link href="~/Content/style.css" rel="stylesheet">
<link href="~/Content/set1.css" rel="stylesheet" />
<title>Doctors Information | Registration</title>
<body>

            @using (Html.BeginForm("Register", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()

                <div id="main-wrapper">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 left-side">
                                <header>
                                    <span>Need an account?</span>
                                    <h3>Create Account<br>Get More Patients</h3>
                                </header>
                            </div>
                            <div class="col-md-6 right-side">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="cta">
                                    
                                    <input type="submit" class="btn btn-primary pull-left" value="Sign-Up Now" />
                                    <span><a href="Login">I am already a member</a></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
</body>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-2.2.3.js"></script>
<script src="~/Scripts/scripts.js"></script>
<script src="~/Scripts/classie.js"></script>
<script>
  (function() {
    // trim polyfill : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
    if (!String.prototype.trim) {
      (function() {
        // Make sure we trim BOM and NBSP
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
          return this.replace(rtrim, '');
        };
      })();
    }

    [].slice.call( document.querySelectorAll( 'input.input__field' ) ).forEach( function( inputEl ) {
      // in case the input is already filled..
      if( inputEl.value.trim() !== '' ) {
        classie.add( inputEl.parentNode, 'input--filled' );
      }

      // events:
      inputEl.addEventListener( 'focus', onInputFocus );
      inputEl.addEventListener( 'blur', onInputBlur );
    } );

    function onInputFocus( ev ) {
      classie.add( ev.target.parentNode, 'input--filled' );
    }

    function onInputBlur( ev ) {
      if( ev.target.value.trim() === '' ) {
        classie.remove( ev.target.parentNode, 'input--filled' );
      }
    }
  })();
</script>